// Generated by @wagmi/cli@1.0.0 on 5/23/2023 at 2:33:38 PM
import {
  useContractRead,
  UseContractReadConfig,
  useContractEvent,
  UseContractEventConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useNetwork,
  Address,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AllowlistMinter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const allowlistMinterABI = [
  { type: 'error', inputs: [], name: 'DoesNotExist' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'root', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'AllowlistCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'LeafClaimed',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hasBeenClaimed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'claimID', internalType: 'uint256', type: 'uint256' },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isAllowedToClaim',
    outputs: [{ name: 'isAllowed', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BountyXHyperDrop
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const bountyXHyperDropABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: '_hypercertMinter', internalType: 'contract HypercertMinter', type: 'address' }],
  },
  { type: 'error', inputs: [], name: 'BountyXHyperDrop__AlreadyClaimed' },
  { type: 'error', inputs: [], name: 'BountyXHyperDrop__InvalidClaimInput' },
  { type: 'error', inputs: [], name: 'BountyXHyperDrop__InvalidRoot' },
  { type: 'error', inputs: [], name: 'BountyXHyperDrop__NotClaimable' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'leaves', internalType: 'bytes32[]', type: 'bytes32[]', indexed: true },
    ],
    name: 'Claimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'ClaimedSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'newRoot', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'publisher', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'MerkleRootAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'leaves', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'proofs', internalType: 'bytes32[][]', type: 'bytes32[][]' },
      { name: 'hyperDropMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'allowListMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'claimHyperdrop',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'leaves', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'proofs', internalType: 'bytes32[][]', type: 'bytes32[][]' },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'fractions', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'claimHyperdropWithFractions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'hyperDropMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'allowListMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'claimSingleHyperdrop',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'fractions', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'claimSingleHyperdropWithFractions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newMerkleRoot', internalType: 'bytes32', type: 'bytes32' }],
    name: 'createHyperdrop',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isClaimableHyperdrop',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ContextUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const contextUpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'increment', outputs: [] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'number', outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'setNumber',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1155BurnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1155BurnableUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'burnBatch',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1155URIStorageUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1155UriStorageUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1155Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1155UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc165UpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC1967UpgradeUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc1967UpgradeUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }], name: 'BeaconUpgraded' },
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Errors
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const errorsABI = [
  { type: 'error', inputs: [], name: 'AlreadyClaimed' },
  { type: 'error', inputs: [], name: 'ArraySize' },
  { type: 'error', inputs: [], name: 'DoesNotExist' },
  { type: 'error', inputs: [], name: 'DuplicateEntry' },
  { type: 'error', inputs: [], name: 'Invalid' },
  { type: 'error', inputs: [], name: 'NotAllowed' },
  { type: 'error', inputs: [], name: 'NotApprovedOrOwner' },
  { type: 'error', inputs: [], name: 'TransfersNotAllowed' },
  { type: 'error', inputs: [], name: 'TypeMismatch' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HypercertMinter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export const hypercertMinterABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  { type: 'error', inputs: [], name: 'AlreadyClaimed' },
  { type: 'error', inputs: [], name: 'ArraySize' },
  { type: 'error', inputs: [], name: 'DoesNotExist' },
  { type: 'error', inputs: [], name: 'DuplicateEntry' },
  { type: 'error', inputs: [], name: 'Invalid' },
  { type: 'error', inputs: [], name: 'NotAllowed' },
  { type: 'error', inputs: [], name: 'NotApprovedOrOwner' },
  { type: 'error', inputs: [], name: 'TransfersNotAllowed' },
  { type: 'error', inputs: [], name: 'TypeMismatch' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'root', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'AllowlistCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimIDs', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'fromTokenIDs', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'toTokenIDs', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'BatchValueTransfer',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }], name: 'BeaconUpgraded' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimID', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'uri', internalType: 'string', type: 'string', indexed: false },
      { name: 'totalUnits', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ClaimStored',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'tokenID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'LeafClaimed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }], name: 'Paused' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }], name: 'Unpaused' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'fromTokenID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'toTokenID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValueTransfer',
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: '__SemiFungible1155_init', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'proofs', internalType: 'bytes32[][]', type: 'bytes32[][]' },
      { name: 'claimIDs', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'units', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'batchMintClaimsFromAllowlists',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'burnBatch',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_tokenID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFraction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: '_uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'createAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hasBeenClaimed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'initialize', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'claimID', internalType: 'uint256', type: 'uint256' },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isAllowedToClaim',
    outputs: [{ name: 'isAllowed', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_fractionIDs', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'mergeFractions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: '_uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'mintClaim',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'claimID', internalType: 'uint256', type: 'uint256' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mintClaimFromAllowlist',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'fractions', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'mintClaimWithFractions',
    outputs: [],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'name', outputs: [{ name: '', internalType: 'string', type: 'string' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'pause', outputs: [] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'paused', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'proxiableUUID', outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'readTransferRestriction',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: '_tokenID', internalType: 'uint256', type: 'uint256' },
      { name: '_newFractions', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'splitFraction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'tokenID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unitsOf',
    outputs: [{ name: 'units', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'unitsOf',
    outputs: [{ name: 'units', internalType: 'uint256', type: 'uint256' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'unpause', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
  },
] as const

/**
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export const hypercertMinterAddress = {
  5: '0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07',
  10: '0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07',
} as const

/**
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export const hypercertMinterConfig = { address: hypercertMinterAddress, abi: hypercertMinterABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IAllowlist
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iAllowlistABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'tokenID', internalType: 'uint256', type: 'uint256' },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isAllowedToClaim',
    outputs: [{ name: 'isAllowed', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IBeaconUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iBeaconUpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'implementation',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155MetadataURIUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155MetadataUriUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'id', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155ReceiverUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155ReceiverUpgradeableABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155BatchReceived',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'onERC1155Received',
    outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1155Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1155UpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC165Upgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc165UpgradeableABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IHyperDrop
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iHyperDropABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'leaves', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'proofs', internalType: 'bytes32[][]', type: 'bytes32[][]' },
      { name: 'hyperDropMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'allowListMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'claimHyperdrop',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'leaves', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'proofs', internalType: 'bytes32[][]', type: 'bytes32[][]' },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'fractions', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'claimHyperdropWithFractions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'hyperDropMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'allowListMerkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'claimSingleHyperdrop',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'fractions', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'claimSingleHyperdropWithFractions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newMerkleRoot', internalType: 'bytes32', type: 'bytes32' }],
    name: 'createHyperdrop',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'leaf', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proof', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'merkleRoot', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isClaimableHyperdrop',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IHypercertToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iHypercertTokenABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimID', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'uri', internalType: 'string', type: 'string', indexed: false },
      { name: 'totalUnits', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ClaimStored',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'tokenID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burnFraction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'tokenIDs', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'mergeFractions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'mintClaim',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'units', internalType: 'uint256', type: 'uint256' },
      { name: 'fractions', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'uri', internalType: 'string', type: 'string' },
      { name: 'restrictions', internalType: 'enum IHypercertToken.TransferRestrictions', type: 'uint8' },
    ],
    name: 'mintClaimWithFractions',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'tokenID', internalType: 'uint256', type: 'uint256' },
      { name: '_values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'splitFraction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'tokenID', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'unitsOf',
    outputs: [{ name: 'units', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'unitsOf',
    outputs: [{ name: 'units', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: 'metadata', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Ownable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OwnableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ownableUpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PausableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pausableUpgradeableABI = [
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  { type: 'event', anonymous: false, inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }], name: 'Paused' },
  { type: 'event', anonymous: false, inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: false }], name: 'Unpaused' },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'paused', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SemiFungible1155
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const semiFungible1155ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ApprovalForAll',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimIDs', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'fromTokenIDs', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'toTokenIDs', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'BatchValueTransfer',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }], name: 'BeaconUpgraded' },
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'TransferBatch',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TransferSingle',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'string', type: 'string', indexed: false },
      { name: 'id', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'URI',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'claimID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'fromTokenID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'toTokenID', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValueTransfer',
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: '__SemiFungible1155_init', outputs: [] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'balanceOfBatch',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'burnBatch',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'operator', internalType: 'address', type: 'address' },
    ],
    name: 'isApprovedForAll',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'owner', outputs: [{ name: '', internalType: 'address', type: 'address' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'ownerOf',
    outputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'proxiableUUID', outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }] },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'renounceOwnership', outputs: [] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'ids', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'amounts', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeBatchTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'id', internalType: 'uint256', type: 'uint256' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'safeTransferFrom',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'operator', internalType: 'address', type: 'address' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
    ],
    name: 'setApprovalForAll',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' }],
    name: 'supportsInterface',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenID', internalType: 'uint256', type: 'uint256' }],
    name: 'uri',
    outputs: [{ name: '_uri', internalType: 'string', type: 'string' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [{ name: 'excludedArtifacts_', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [{ name: 'excludedContracts_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [{ name: 'excludedSenders_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [{ name: 'targetedArtifacts_', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [{ name: 'targetedContracts_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [{ name: 'targetedSenders_', internalType: 'address[]', type: 'address[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Test
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testABI = [
  { type: 'event', anonymous: false, inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }], name: 'log' },
  { type: 'event', anonymous: false, inputs: [{ name: '', internalType: 'address', type: 'address', indexed: false }], name: 'log_address' },
  { type: 'event', anonymous: false, inputs: [{ name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false }], name: 'log_array' },
  { type: 'event', anonymous: false, inputs: [{ name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false }], name: 'log_array' },
  { type: 'event', anonymous: false, inputs: [{ name: 'val', internalType: 'address[]', type: 'address[]', indexed: false }], name: 'log_array' },
  { type: 'event', anonymous: false, inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }], name: 'log_bytes' },
  { type: 'event', anonymous: false, inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32', indexed: false }], name: 'log_bytes32' },
  { type: 'event', anonymous: false, inputs: [{ name: '', internalType: 'int256', type: 'int256', indexed: false }], name: 'log_int' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256[]', type: 'int256[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'decimals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  { type: 'event', anonymous: false, inputs: [{ name: '', internalType: 'string', type: 'string', indexed: false }], name: 'log_string' },
  { type: 'event', anonymous: false, inputs: [{ name: '', internalType: 'uint256', type: 'uint256', indexed: false }], name: 'log_uint' },
  { type: 'event', anonymous: false, inputs: [{ name: '', internalType: 'bytes', type: 'bytes', indexed: false }], name: 'logs' },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'IS_TEST', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [{ name: 'excludedArtifacts_', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [{ name: 'excludedContracts_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [{ name: 'excludedSenders_', internalType: 'address[]', type: 'address[]' }],
  },
  { stateMutability: 'nonpayable', type: 'function', inputs: [], name: 'failed', outputs: [{ name: '', internalType: 'bool', type: 'bool' }] },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [{ name: 'targetedArtifacts_', internalType: 'string[]', type: 'string[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [{ name: 'targetedContracts_', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [{ name: 'targetedSenders_', internalType: 'address[]', type: 'address[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UUPSUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const uupsUpgradeableABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousAdmin', internalType: 'address', type: 'address', indexed: false },
      { name: 'newAdmin', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AdminChanged',
  },
  { type: 'event', anonymous: false, inputs: [{ name: 'beacon', internalType: 'address', type: 'address', indexed: true }], name: 'BeaconUpgraded' },
  { type: 'event', anonymous: false, inputs: [{ name: 'version', internalType: 'uint8', type: 'uint8', indexed: false }], name: 'Initialized' },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'Upgraded',
  },
  { stateMutability: 'view', type: 'function', inputs: [], name: 'proxiableUUID', outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }] },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newImplementation', internalType: 'address', type: 'address' }],
    name: 'upgradeTo',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'newImplementation', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'upgradeToAndCall',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC1822ProxiableUpgradeable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc1822ProxiableUpgradeableABI = [
  { stateMutability: 'view', type: 'function', inputs: [], name: 'proxiableUUID', outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }] },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link allowlistMinterABI}__.
 */
export function useAllowlistMinterRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof allowlistMinterABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof allowlistMinterABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: allowlistMinterABI, ...config } as UseContractReadConfig<typeof allowlistMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link allowlistMinterABI}__ and `functionName` set to `"hasBeenClaimed"`.
 */
export function useAllowlistMinterHasBeenClaimed<
  TFunctionName extends 'hasBeenClaimed',
  TSelectData = ReadContractResult<typeof allowlistMinterABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof allowlistMinterABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: allowlistMinterABI, functionName: 'hasBeenClaimed', ...config } as UseContractReadConfig<
    typeof allowlistMinterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link allowlistMinterABI}__ and `functionName` set to `"isAllowedToClaim"`.
 */
export function useAllowlistMinterIsAllowedToClaim<
  TFunctionName extends 'isAllowedToClaim',
  TSelectData = ReadContractResult<typeof allowlistMinterABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof allowlistMinterABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: allowlistMinterABI, functionName: 'isAllowedToClaim', ...config } as UseContractReadConfig<
    typeof allowlistMinterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistMinterABI}__.
 */
export function useAllowlistMinterEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof allowlistMinterABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: allowlistMinterABI, ...config } as UseContractEventConfig<typeof allowlistMinterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistMinterABI}__ and `eventName` set to `"AllowlistCreated"`.
 */
export function useAllowlistMinterAllowlistCreatedEvent(
  config: Omit<UseContractEventConfig<typeof allowlistMinterABI, 'AllowlistCreated'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: allowlistMinterABI, eventName: 'AllowlistCreated', ...config } as UseContractEventConfig<
    typeof allowlistMinterABI,
    'AllowlistCreated'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link allowlistMinterABI}__ and `eventName` set to `"LeafClaimed"`.
 */
export function useAllowlistMinterLeafClaimedEvent(
  config: Omit<UseContractEventConfig<typeof allowlistMinterABI, 'LeafClaimed'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: allowlistMinterABI, eventName: 'LeafClaimed', ...config } as UseContractEventConfig<
    typeof allowlistMinterABI,
    'LeafClaimed'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bountyXHyperDropABI}__.
 */
export function useBountyXHyperDropRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof bountyXHyperDropABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof bountyXHyperDropABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: bountyXHyperDropABI, ...config } as UseContractReadConfig<typeof bountyXHyperDropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"isClaimableHyperdrop"`.
 */
export function useBountyXHyperDropIsClaimableHyperdrop<
  TFunctionName extends 'isClaimableHyperdrop',
  TSelectData = ReadContractResult<typeof bountyXHyperDropABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof bountyXHyperDropABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: bountyXHyperDropABI, functionName: 'isClaimableHyperdrop', ...config } as UseContractReadConfig<
    typeof bountyXHyperDropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"owner"`.
 */
export function useBountyXHyperDropOwner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof bountyXHyperDropABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof bountyXHyperDropABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: bountyXHyperDropABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof bountyXHyperDropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__.
 */
export function useBountyXHyperDropWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof bountyXHyperDropABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof bountyXHyperDropABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof bountyXHyperDropABI, TFunctionName, TMode>({ abi: bountyXHyperDropABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"claimHyperdrop"`.
 */
export function useBountyXHyperDropClaimHyperdrop<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof bountyXHyperDropABI, 'claimHyperdrop'>['request']['abi'], 'claimHyperdrop', TMode> & {
        functionName?: 'claimHyperdrop'
      }
    : UseContractWriteConfig<typeof bountyXHyperDropABI, 'claimHyperdrop', TMode> & {
        abi?: never
        functionName?: 'claimHyperdrop'
      } = {} as any
) {
  return useContractWrite<typeof bountyXHyperDropABI, 'claimHyperdrop', TMode>({
    abi: bountyXHyperDropABI,
    functionName: 'claimHyperdrop',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"claimHyperdropWithFractions"`.
 */
export function useBountyXHyperDropClaimHyperdropWithFractions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof bountyXHyperDropABI, 'claimHyperdropWithFractions'>['request']['abi'],
        'claimHyperdropWithFractions',
        TMode
      > & { functionName?: 'claimHyperdropWithFractions' }
    : UseContractWriteConfig<typeof bountyXHyperDropABI, 'claimHyperdropWithFractions', TMode> & {
        abi?: never
        functionName?: 'claimHyperdropWithFractions'
      } = {} as any
) {
  return useContractWrite<typeof bountyXHyperDropABI, 'claimHyperdropWithFractions', TMode>({
    abi: bountyXHyperDropABI,
    functionName: 'claimHyperdropWithFractions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"claimSingleHyperdrop"`.
 */
export function useBountyXHyperDropClaimSingleHyperdrop<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof bountyXHyperDropABI, 'claimSingleHyperdrop'>['request']['abi'],
        'claimSingleHyperdrop',
        TMode
      > & { functionName?: 'claimSingleHyperdrop' }
    : UseContractWriteConfig<typeof bountyXHyperDropABI, 'claimSingleHyperdrop', TMode> & {
        abi?: never
        functionName?: 'claimSingleHyperdrop'
      } = {} as any
) {
  return useContractWrite<typeof bountyXHyperDropABI, 'claimSingleHyperdrop', TMode>({
    abi: bountyXHyperDropABI,
    functionName: 'claimSingleHyperdrop',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"claimSingleHyperdropWithFractions"`.
 */
export function useBountyXHyperDropClaimSingleHyperdropWithFractions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof bountyXHyperDropABI, 'claimSingleHyperdropWithFractions'>['request']['abi'],
        'claimSingleHyperdropWithFractions',
        TMode
      > & { functionName?: 'claimSingleHyperdropWithFractions' }
    : UseContractWriteConfig<typeof bountyXHyperDropABI, 'claimSingleHyperdropWithFractions', TMode> & {
        abi?: never
        functionName?: 'claimSingleHyperdropWithFractions'
      } = {} as any
) {
  return useContractWrite<typeof bountyXHyperDropABI, 'claimSingleHyperdropWithFractions', TMode>({
    abi: bountyXHyperDropABI,
    functionName: 'claimSingleHyperdropWithFractions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"createHyperdrop"`.
 */
export function useBountyXHyperDropCreateHyperdrop<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof bountyXHyperDropABI, 'createHyperdrop'>['request']['abi'],
        'createHyperdrop',
        TMode
      > & { functionName?: 'createHyperdrop' }
    : UseContractWriteConfig<typeof bountyXHyperDropABI, 'createHyperdrop', TMode> & {
        abi?: never
        functionName?: 'createHyperdrop'
      } = {} as any
) {
  return useContractWrite<typeof bountyXHyperDropABI, 'createHyperdrop', TMode>({
    abi: bountyXHyperDropABI,
    functionName: 'createHyperdrop',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useBountyXHyperDropRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof bountyXHyperDropABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof bountyXHyperDropABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof bountyXHyperDropABI, 'renounceOwnership', TMode>({
    abi: bountyXHyperDropABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBountyXHyperDropTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof bountyXHyperDropABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof bountyXHyperDropABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof bountyXHyperDropABI, 'transferOwnership', TMode>({
    abi: bountyXHyperDropABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__.
 */
export function usePrepareBountyXHyperDropWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: bountyXHyperDropABI, ...config } as UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"claimHyperdrop"`.
 */
export function usePrepareBountyXHyperDropClaimHyperdrop(
  config: Omit<UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, 'claimHyperdrop'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: bountyXHyperDropABI, functionName: 'claimHyperdrop', ...config } as UsePrepareContractWriteConfig<
    typeof bountyXHyperDropABI,
    'claimHyperdrop'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"claimHyperdropWithFractions"`.
 */
export function usePrepareBountyXHyperDropClaimHyperdropWithFractions(
  config: Omit<UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, 'claimHyperdropWithFractions'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: bountyXHyperDropABI,
    functionName: 'claimHyperdropWithFractions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, 'claimHyperdropWithFractions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"claimSingleHyperdrop"`.
 */
export function usePrepareBountyXHyperDropClaimSingleHyperdrop(
  config: Omit<UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, 'claimSingleHyperdrop'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: bountyXHyperDropABI, functionName: 'claimSingleHyperdrop', ...config } as UsePrepareContractWriteConfig<
    typeof bountyXHyperDropABI,
    'claimSingleHyperdrop'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"claimSingleHyperdropWithFractions"`.
 */
export function usePrepareBountyXHyperDropClaimSingleHyperdropWithFractions(
  config: Omit<UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, 'claimSingleHyperdropWithFractions'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: bountyXHyperDropABI,
    functionName: 'claimSingleHyperdropWithFractions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, 'claimSingleHyperdropWithFractions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"createHyperdrop"`.
 */
export function usePrepareBountyXHyperDropCreateHyperdrop(
  config: Omit<UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, 'createHyperdrop'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: bountyXHyperDropABI, functionName: 'createHyperdrop', ...config } as UsePrepareContractWriteConfig<
    typeof bountyXHyperDropABI,
    'createHyperdrop'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareBountyXHyperDropRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: bountyXHyperDropABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof bountyXHyperDropABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBountyXHyperDropTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof bountyXHyperDropABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: bountyXHyperDropABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof bountyXHyperDropABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bountyXHyperDropABI}__.
 */
export function useBountyXHyperDropEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof bountyXHyperDropABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: bountyXHyperDropABI, ...config } as UseContractEventConfig<typeof bountyXHyperDropABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `eventName` set to `"Claimed"`.
 */
export function useBountyXHyperDropClaimedEvent(
  config: Omit<UseContractEventConfig<typeof bountyXHyperDropABI, 'Claimed'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: bountyXHyperDropABI, eventName: 'Claimed', ...config } as UseContractEventConfig<
    typeof bountyXHyperDropABI,
    'Claimed'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `eventName` set to `"ClaimedSingle"`.
 */
export function useBountyXHyperDropClaimedSingleEvent(
  config: Omit<UseContractEventConfig<typeof bountyXHyperDropABI, 'ClaimedSingle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: bountyXHyperDropABI, eventName: 'ClaimedSingle', ...config } as UseContractEventConfig<
    typeof bountyXHyperDropABI,
    'ClaimedSingle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `eventName` set to `"MerkleRootAdded"`.
 */
export function useBountyXHyperDropMerkleRootAddedEvent(
  config: Omit<UseContractEventConfig<typeof bountyXHyperDropABI, 'MerkleRootAdded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: bountyXHyperDropABI, eventName: 'MerkleRootAdded', ...config } as UseContractEventConfig<
    typeof bountyXHyperDropABI,
    'MerkleRootAdded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link bountyXHyperDropABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBountyXHyperDropOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof bountyXHyperDropABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: bountyXHyperDropABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof bountyXHyperDropABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__.
 */
export function useContextUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof contextUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: contextUpgradeableABI, ...config } as UseContractEventConfig<typeof contextUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link contextUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useContextUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof contextUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: contextUpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof contextUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof counterABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: counterABI, ...config } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 */
export function useCounterNumber<TFunctionName extends 'number', TSelectData = ReadContractResult<typeof counterABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: counterABI, functionName: 'number', ...config } as UseContractReadConfig<
    typeof counterABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof counterABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof counterABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof counterABI, TFunctionName, TMode>({ abi: counterABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof counterABI, 'increment'>['request']['abi'], 'increment', TMode> & {
        functionName?: 'increment'
      }
    : UseContractWriteConfig<typeof counterABI, 'increment', TMode> & {
        abi?: never
        functionName?: 'increment'
      } = {} as any
) {
  return useContractWrite<typeof counterABI, 'increment', TMode>({ abi: counterABI, functionName: 'increment', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof counterABI, 'setNumber'>['request']['abi'], 'setNumber', TMode> & {
        functionName?: 'setNumber'
      }
    : UseContractWriteConfig<typeof counterABI, 'setNumber', TMode> & {
        abi?: never
        functionName?: 'setNumber'
      } = {} as any
) {
  return useContractWrite<typeof counterABI, 'setNumber', TMode>({ abi: counterABI, functionName: 'setNumber', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: counterABI, ...config } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(
  config: Omit<UsePrepareContractWriteConfig<typeof counterABI, 'increment'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: counterABI, functionName: 'increment', ...config } as UsePrepareContractWriteConfig<
    typeof counterABI,
    'increment'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(
  config: Omit<UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: counterABI, functionName: 'setNumber', ...config } as UsePrepareContractWriteConfig<
    typeof counterABI,
    'setNumber'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__.
 */
export function useErc1155BurnableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc1155BurnableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155BurnableUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc1155BurnableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc1155BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc1155BurnableUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc1155BurnableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155BurnableUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155BurnableUpgradeableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc1155BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useErc1155BurnableUpgradeableBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof erc1155BurnableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155BurnableUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155BurnableUpgradeableABI, functionName: 'balanceOfBatch', ...config } as UseContractReadConfig<
    typeof erc1155BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc1155BurnableUpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc1155BurnableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155BurnableUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155BurnableUpgradeableABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc1155BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc1155BurnableUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc1155BurnableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155BurnableUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155BurnableUpgradeableABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc1155BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"uri"`.
 */
export function useErc1155BurnableUpgradeableUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<typeof erc1155BurnableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155BurnableUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155BurnableUpgradeableABI, functionName: 'uri', ...config } as UseContractReadConfig<
    typeof erc1155BurnableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__.
 */
export function useErc1155BurnableUpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155BurnableUpgradeableABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof erc1155BurnableUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc1155BurnableUpgradeableABI, TFunctionName, TMode>({ abi: erc1155BurnableUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function useErc1155BurnableUpgradeableBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155BurnableUpgradeableABI, 'burn'>['request']['abi'], 'burn', TMode> & {
        functionName?: 'burn'
      }
    : UseContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof erc1155BurnableUpgradeableABI, 'burn', TMode>({
    abi: erc1155BurnableUpgradeableABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"burnBatch"`.
 */
export function useErc1155BurnableUpgradeableBurnBatch<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155BurnableUpgradeableABI, 'burnBatch'>['request']['abi'], 'burnBatch', TMode> & {
        functionName?: 'burnBatch'
      }
    : UseContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'burnBatch', TMode> & {
        abi?: never
        functionName?: 'burnBatch'
      } = {} as any
) {
  return useContractWrite<typeof erc1155BurnableUpgradeableABI, 'burnBatch', TMode>({
    abi: erc1155BurnableUpgradeableABI,
    functionName: 'burnBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useErc1155BurnableUpgradeableSafeBatchTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155BurnableUpgradeableABI, 'safeBatchTransferFrom'>['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc1155BurnableUpgradeableABI, 'safeBatchTransferFrom', TMode>({
    abi: erc1155BurnableUpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc1155BurnableUpgradeableSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155BurnableUpgradeableABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc1155BurnableUpgradeableABI, 'safeTransferFrom', TMode>({
    abi: erc1155BurnableUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc1155BurnableUpgradeableSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155BurnableUpgradeableABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<typeof erc1155BurnableUpgradeableABI, 'setApprovalForAll', TMode>({
    abi: erc1155BurnableUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__.
 */
export function usePrepareErc1155BurnableUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155BurnableUpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155BurnableUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc1155BurnableUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareErc1155BurnableUpgradeableBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155BurnableUpgradeableABI, functionName: 'burn', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155BurnableUpgradeableABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"burnBatch"`.
 */
export function usePrepareErc1155BurnableUpgradeableBurnBatch(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'burnBatch'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155BurnableUpgradeableABI, functionName: 'burnBatch', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155BurnableUpgradeableABI,
    'burnBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareErc1155BurnableUpgradeableSafeBatchTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'safeBatchTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155BurnableUpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'safeBatchTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc1155BurnableUpgradeableSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155BurnableUpgradeableABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155BurnableUpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc1155BurnableUpgradeableSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155BurnableUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc1155BurnableUpgradeableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__.
 */
export function useErc1155BurnableUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1155BurnableUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc1155BurnableUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc1155BurnableUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc1155BurnableUpgradeableApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc1155BurnableUpgradeableABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155BurnableUpgradeableABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof erc1155BurnableUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1155BurnableUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof erc1155BurnableUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155BurnableUpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof erc1155BurnableUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useErc1155BurnableUpgradeableTransferBatchEvent(
  config: Omit<UseContractEventConfig<typeof erc1155BurnableUpgradeableABI, 'TransferBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155BurnableUpgradeableABI, eventName: 'TransferBatch', ...config } as UseContractEventConfig<
    typeof erc1155BurnableUpgradeableABI,
    'TransferBatch'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useErc1155BurnableUpgradeableTransferSingleEvent(
  config: Omit<UseContractEventConfig<typeof erc1155BurnableUpgradeableABI, 'TransferSingle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155BurnableUpgradeableABI, eventName: 'TransferSingle', ...config } as UseContractEventConfig<
    typeof erc1155BurnableUpgradeableABI,
    'TransferSingle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155BurnableUpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useErc1155BurnableUpgradeableUriEvent(
  config: Omit<UseContractEventConfig<typeof erc1155BurnableUpgradeableABI, 'URI'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155BurnableUpgradeableABI, eventName: 'URI', ...config } as UseContractEventConfig<
    typeof erc1155BurnableUpgradeableABI,
    'URI'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__.
 */
export function useErc1155UriStorageUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc1155UriStorageUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UriStorageUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc1155UriStorageUpgradeableABI, ...config } as UseContractReadConfig<
    typeof erc1155UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc1155UriStorageUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc1155UriStorageUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UriStorageUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155UriStorageUpgradeableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc1155UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useErc1155UriStorageUpgradeableBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof erc1155UriStorageUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UriStorageUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155UriStorageUpgradeableABI, functionName: 'balanceOfBatch', ...config } as UseContractReadConfig<
    typeof erc1155UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc1155UriStorageUpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc1155UriStorageUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UriStorageUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155UriStorageUpgradeableABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc1155UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc1155UriStorageUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc1155UriStorageUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UriStorageUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155UriStorageUpgradeableABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc1155UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"uri"`.
 */
export function useErc1155UriStorageUpgradeableUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<typeof erc1155UriStorageUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UriStorageUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155UriStorageUpgradeableABI, functionName: 'uri', ...config } as UseContractReadConfig<
    typeof erc1155UriStorageUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__.
 */
export function useErc1155UriStorageUpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155UriStorageUpgradeableABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc1155UriStorageUpgradeableABI, TFunctionName, TMode>({ abi: erc1155UriStorageUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useErc1155UriStorageUpgradeableSafeBatchTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155UriStorageUpgradeableABI, 'safeBatchTransferFrom'>['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc1155UriStorageUpgradeableABI, 'safeBatchTransferFrom', TMode>({
    abi: erc1155UriStorageUpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc1155UriStorageUpgradeableSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155UriStorageUpgradeableABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc1155UriStorageUpgradeableABI, 'safeTransferFrom', TMode>({
    abi: erc1155UriStorageUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc1155UriStorageUpgradeableSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155UriStorageUpgradeableABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<typeof erc1155UriStorageUpgradeableABI, 'setApprovalForAll', TMode>({
    abi: erc1155UriStorageUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__.
 */
export function usePrepareErc1155UriStorageUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155UriStorageUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc1155UriStorageUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareErc1155UriStorageUpgradeableSafeBatchTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, 'safeBatchTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155UriStorageUpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, 'safeBatchTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc1155UriStorageUpgradeableSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155UriStorageUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc1155UriStorageUpgradeableSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: erc1155UriStorageUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc1155UriStorageUpgradeableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__.
 */
export function useErc1155UriStorageUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1155UriStorageUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc1155UriStorageUpgradeableABI, ...config } as UseContractEventConfig<
    typeof erc1155UriStorageUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc1155UriStorageUpgradeableApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UriStorageUpgradeableABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UriStorageUpgradeableABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof erc1155UriStorageUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1155UriStorageUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UriStorageUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UriStorageUpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof erc1155UriStorageUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useErc1155UriStorageUpgradeableTransferBatchEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UriStorageUpgradeableABI, 'TransferBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UriStorageUpgradeableABI, eventName: 'TransferBatch', ...config } as UseContractEventConfig<
    typeof erc1155UriStorageUpgradeableABI,
    'TransferBatch'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useErc1155UriStorageUpgradeableTransferSingleEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UriStorageUpgradeableABI, 'TransferSingle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UriStorageUpgradeableABI, eventName: 'TransferSingle', ...config } as UseContractEventConfig<
    typeof erc1155UriStorageUpgradeableABI,
    'TransferSingle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UriStorageUpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useErc1155UriStorageUpgradeableUriEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UriStorageUpgradeableABI, 'URI'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UriStorageUpgradeableABI, eventName: 'URI', ...config } as UseContractEventConfig<
    typeof erc1155UriStorageUpgradeableABI,
    'URI'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__.
 */
export function useErc1155UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: erc1155UpgradeableABI, ...config } as UseContractReadConfig<typeof erc1155UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc1155UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof erc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155UpgradeableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useErc1155UpgradeableBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof erc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155UpgradeableABI, functionName: 'balanceOfBatch', ...config } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useErc1155UpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof erc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155UpgradeableABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc1155UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc1155UpgradeableABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"uri"`.
 */
export function useErc1155UpgradeableUri<TFunctionName extends 'uri', TSelectData = ReadContractResult<typeof erc1155UpgradeableABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: erc1155UpgradeableABI, functionName: 'uri', ...config } as UseContractReadConfig<
    typeof erc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__.
 */
export function useErc1155UpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof erc1155UpgradeableABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof erc1155UpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof erc1155UpgradeableABI, TFunctionName, TMode>({ abi: erc1155UpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useErc1155UpgradeableSafeBatchTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155UpgradeableABI, 'safeBatchTransferFrom'>['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<typeof erc1155UpgradeableABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc1155UpgradeableABI, 'safeBatchTransferFrom', TMode>({
    abi: erc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useErc1155UpgradeableSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155UpgradeableABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof erc1155UpgradeableABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof erc1155UpgradeableABI, 'safeTransferFrom', TMode>({
    abi: erc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useErc1155UpgradeableSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof erc1155UpgradeableABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof erc1155UpgradeableABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<typeof erc1155UpgradeableABI, 'setApprovalForAll', TMode>({
    abi: erc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__.
 */
export function usePrepareErc1155UpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155UpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155UpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof erc1155UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareErc1155UpgradeableSafeBatchTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155UpgradeableABI, 'safeBatchTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155UpgradeableABI, functionName: 'safeBatchTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155UpgradeableABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareErc1155UpgradeableSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155UpgradeableABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155UpgradeableABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareErc1155UpgradeableSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof erc1155UpgradeableABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: erc1155UpgradeableABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof erc1155UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__.
 */
export function useErc1155UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1155UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc1155UpgradeableABI, ...config } as UseContractEventConfig<typeof erc1155UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useErc1155UpgradeableApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UpgradeableABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UpgradeableABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof erc1155UpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1155UpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof erc1155UpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useErc1155UpgradeableTransferBatchEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UpgradeableABI, 'TransferBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UpgradeableABI, eventName: 'TransferBatch', ...config } as UseContractEventConfig<
    typeof erc1155UpgradeableABI,
    'TransferBatch'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useErc1155UpgradeableTransferSingleEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UpgradeableABI, 'TransferSingle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UpgradeableABI, eventName: 'TransferSingle', ...config } as UseContractEventConfig<
    typeof erc1155UpgradeableABI,
    'TransferSingle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1155UpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useErc1155UpgradeableUriEvent(
  config: Omit<UseContractEventConfig<typeof erc1155UpgradeableABI, 'URI'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1155UpgradeableABI, eventName: 'URI', ...config } as UseContractEventConfig<typeof erc1155UpgradeableABI, 'URI'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: erc165UpgradeableABI, ...config } as UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useErc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof erc165UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof erc165UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: erc165UpgradeableABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof erc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__.
 */
export function useErc165UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc165UpgradeableABI, ...config } as UseContractEventConfig<typeof erc165UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc165UpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc165UpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof erc165UpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc165UpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof erc165UpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__.
 */
export function useErc1967UpgradeUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeUpgradeableABI, ...config } as UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useErc1967UpgradeUpgradeableAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeUpgradeableABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useErc1967UpgradeUpgradeableBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeUpgradeableABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useErc1967UpgradeUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeUpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc1967UpgradeUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useErc1967UpgradeUpgradeableUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof erc1967UpgradeUpgradeableABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: erc1967UpgradeUpgradeableABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof erc1967UpgradeUpgradeableABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"balanceOf"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"balanceOfBatch"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'balanceOfBatch',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"hasBeenClaimed"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterHasBeenClaimed<
  TFunctionName extends 'hasBeenClaimed',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'hasBeenClaimed',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"isAllowedToClaim"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterIsAllowedToClaim<
  TFunctionName extends 'isAllowedToClaim',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'isAllowedToClaim',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'isApprovedForAll',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"name"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterName<TFunctionName extends 'name', TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"owner"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterOwner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"ownerOf"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterOwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'ownerOf',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"paused"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterPaused<TFunctionName extends 'paused', TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'paused',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"proxiableUUID"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'proxiableUUID',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"readTransferRestriction"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterReadTransferRestriction<
  TFunctionName extends 'readTransferRestriction',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'readTransferRestriction',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"supportsInterface"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'supportsInterface',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"unitsOf"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterUnitsOf<
  TFunctionName extends 'unitsOf',
  TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>
>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'unitsOf',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"uri"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterUri<TFunctionName extends 'uri', TSelectData = ReadContractResult<typeof hypercertMinterABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractRead({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'uri',
    ...config,
  } as UseContractReadConfig<typeof hypercertMinterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, string>['request']['abi'], TFunctionName, TMode> & {
        address?: Address
        chainId?: TChainId
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, TFunctionName, TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, TFunctionName, TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"__SemiFungible1155_init"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterSemiFungible1155Init<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, '__SemiFungible1155_init'>['request']['abi'],
        '__SemiFungible1155_init',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: '__SemiFungible1155_init' }
    : UseContractWriteConfig<typeof hypercertMinterABI, '__SemiFungible1155_init', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: '__SemiFungible1155_init'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, '__SemiFungible1155_init', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: '__SemiFungible1155_init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"batchMintClaimsFromAllowlists"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterBatchMintClaimsFromAllowlists<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, 'batchMintClaimsFromAllowlists'>['request']['abi'],
        'batchMintClaimsFromAllowlists',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'batchMintClaimsFromAllowlists' }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'batchMintClaimsFromAllowlists', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'batchMintClaimsFromAllowlists'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'batchMintClaimsFromAllowlists', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'batchMintClaimsFromAllowlists',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"burn"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterBurn<TMode extends WriteContractMode = undefined, TChainId extends number = keyof typeof hypercertMinterAddress>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'burn'>['request']['abi'], 'burn', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'burn'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'burn', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burn'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'burn', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"burnBatch"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterBurnBatch<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'burnBatch'>['request']['abi'], 'burnBatch', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'burnBatch'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'burnBatch', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burnBatch'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'burnBatch', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'burnBatch',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"burnFraction"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterBurnFraction<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'burnFraction'>['request']['abi'], 'burnFraction', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'burnFraction'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'burnFraction', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'burnFraction'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'burnFraction', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'burnFraction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"createAllowlist"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterCreateAllowlist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'createAllowlist'>['request']['abi'], 'createAllowlist', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'createAllowlist'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'createAllowlist', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'createAllowlist'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'createAllowlist', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'createAllowlist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"initialize"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterInitialize<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'initialize'>['request']['abi'], 'initialize', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'initialize'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'initialize', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'initialize'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'initialize', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"mergeFractions"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterMergeFractions<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'mergeFractions'>['request']['abi'], 'mergeFractions', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'mergeFractions'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'mergeFractions', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mergeFractions'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'mergeFractions', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'mergeFractions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"mintClaim"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterMintClaim<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'mintClaim'>['request']['abi'], 'mintClaim', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'mintClaim'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'mintClaim', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintClaim'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'mintClaim', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'mintClaim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"mintClaimFromAllowlist"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterMintClaimFromAllowlist<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, 'mintClaimFromAllowlist'>['request']['abi'],
        'mintClaimFromAllowlist',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mintClaimFromAllowlist' }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'mintClaimFromAllowlist', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintClaimFromAllowlist'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'mintClaimFromAllowlist', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'mintClaimFromAllowlist',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"mintClaimWithFractions"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterMintClaimWithFractions<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, 'mintClaimWithFractions'>['request']['abi'],
        'mintClaimWithFractions',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'mintClaimWithFractions' }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'mintClaimWithFractions', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'mintClaimWithFractions'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'mintClaimWithFractions', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'mintClaimWithFractions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"pause"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterPause<TMode extends WriteContractMode = undefined, TChainId extends number = keyof typeof hypercertMinterAddress>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'pause'>['request']['abi'], 'pause', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'pause'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'pause', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'pause'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'pause', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'pause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterRenounceOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'renounceOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'renounceOwnership', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterSafeBatchTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, 'safeBatchTransferFrom'>['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeBatchTransferFrom'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'safeBatchTransferFrom', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterSafeTransferFrom<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'safeTransferFrom', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'safeTransferFrom', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterSetApprovalForAll<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'setApprovalForAll', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'setApprovalForAll', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"splitFraction"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterSplitFraction<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'splitFraction'>['request']['abi'], 'splitFraction', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'splitFraction'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'splitFraction', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'splitFraction'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'splitFraction', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'splitFraction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterTransferOwnership<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'transferOwnership', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'transferOwnership'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'transferOwnership', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"unpause"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterUnpause<TMode extends WriteContractMode = undefined, TChainId extends number = keyof typeof hypercertMinterAddress>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'unpause'>['request']['abi'], 'unpause', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'unpause'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'unpause', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'unpause'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'unpause', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'unpause',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterUpgradeTo<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof hypercertMinterABI, 'upgradeTo'>['request']['abi'], 'upgradeTo', TMode> & {
        address?: Address
        chainId?: TChainId
        functionName?: 'upgradeTo'
      }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'upgradeTo', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeTo'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'upgradeTo', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'upgradeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterUpgradeToAndCall<
  TMode extends WriteContractMode = undefined,
  TChainId extends number = keyof typeof hypercertMinterAddress
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof hypercertMinterABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { address?: Address; chainId?: TChainId; functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof hypercertMinterABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        address?: never
        chainId?: TChainId
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractWrite<typeof hypercertMinterABI, 'upgradeToAndCall', TMode>({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, TFunctionName>, 'abi' | 'address'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"__SemiFungible1155_init"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterSemiFungible1155Init(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, '__SemiFungible1155_init'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: '__SemiFungible1155_init',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, '__SemiFungible1155_init'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"batchMintClaimsFromAllowlists"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterBatchMintClaimsFromAllowlists(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'batchMintClaimsFromAllowlists'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'batchMintClaimsFromAllowlists',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'batchMintClaimsFromAllowlists'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"burn"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterBurn(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'burn'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"burnBatch"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterBurnBatch(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'burnBatch'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'burnBatch',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'burnBatch'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"burnFraction"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterBurnFraction(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'burnFraction'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'burnFraction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'burnFraction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"createAllowlist"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterCreateAllowlist(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'createAllowlist'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'createAllowlist',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'createAllowlist'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"initialize"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterInitialize(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'initialize'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"mergeFractions"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterMergeFractions(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'mergeFractions'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'mergeFractions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'mergeFractions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"mintClaim"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterMintClaim(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'mintClaim'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'mintClaim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'mintClaim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"mintClaimFromAllowlist"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterMintClaimFromAllowlist(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'mintClaimFromAllowlist'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'mintClaimFromAllowlist',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'mintClaimFromAllowlist'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"mintClaimWithFractions"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterMintClaimWithFractions(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'mintClaimWithFractions'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'mintClaimWithFractions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'mintClaimWithFractions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"pause"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterPause(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'pause'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'pause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'pause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'renounceOwnership'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterSafeBatchTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'safeBatchTransferFrom'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'safeBatchTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'safeTransferFrom'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'setApprovalForAll'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"splitFraction"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterSplitFraction(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'splitFraction'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'splitFraction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'splitFraction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"transferOwnership"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'transferOwnership'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"unpause"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterUnpause(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'unpause'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'unpause',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'unpause'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"upgradeTo"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterUpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'upgradeTo'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'upgradeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'upgradeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link hypercertMinterABI}__ and `functionName` set to `"upgradeToAndCall"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function usePrepareHypercertMinterUpgradeToAndCall(
  config: Omit<UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'upgradeToAndCall'>, 'abi' | 'address' | 'functionName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return usePrepareContractWrite({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    functionName: 'upgradeToAndCall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof hypercertMinterABI, 'upgradeToAndCall'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, TEventName>, 'abi' | 'address'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"AdminChanged"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'AdminChanged'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'AdminChanged',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'AdminChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"AllowlistCreated"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterAllowlistCreatedEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'AllowlistCreated'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'AllowlistCreated',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'AllowlistCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'ApprovalForAll'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'ApprovalForAll',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"BatchValueTransfer"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterBatchValueTransferEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'BatchValueTransfer'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'BatchValueTransfer',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'BatchValueTransfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"BeaconUpgraded"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'BeaconUpgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'BeaconUpgraded',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'BeaconUpgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"ClaimStored"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterClaimStoredEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'ClaimStored'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'ClaimStored',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'ClaimStored'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"Initialized"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterInitializedEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'Initialized'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'Initialized',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'Initialized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"LeafClaimed"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterLeafClaimedEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'LeafClaimed'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'LeafClaimed',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'LeafClaimed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'OwnershipTransferred'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"Paused"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterPausedEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'Paused'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'Paused',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'Paused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"TransferBatch"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterTransferBatchEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'TransferBatch'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'TransferBatch',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'TransferBatch'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"TransferSingle"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterTransferSingleEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'TransferSingle'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'TransferSingle',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'TransferSingle'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"URI"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterUriEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'URI'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'URI',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'URI'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"Unpaused"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'Unpaused'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'Unpaused',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'Unpaused'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"Upgraded"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'Upgraded'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'Upgraded',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'Upgraded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link hypercertMinterABI}__ and `eventName` set to `"ValueTransfer"`.
 *
 * - [__View Contract on Goerli Etherscan__](https://goerli.etherscan.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 * - [__View Contract on Optimism Optimism Explorer__](https://explorer.optimism.io/address/0x822F17A9A5EeCFd66dBAFf7946a8071C265D1d07)
 */
export function useHypercertMinterValueTransferEvent(
  config: Omit<UseContractEventConfig<typeof hypercertMinterABI, 'ValueTransfer'>, 'abi' | 'address' | 'eventName'> & {
    chainId?: keyof typeof hypercertMinterAddress
  } = {} as any
) {
  const { chain } = useNetwork()
  const chainId = config.chainId ?? chain?.id
  return useContractEvent({
    abi: hypercertMinterABI,
    address: hypercertMinterAddress[chainId as keyof typeof hypercertMinterAddress],
    eventName: 'ValueTransfer',
    ...config,
  } as UseContractEventConfig<typeof hypercertMinterABI, 'ValueTransfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAllowlistABI}__.
 */
export function useIAllowlistRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof iAllowlistABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iAllowlistABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iAllowlistABI, ...config } as UseContractReadConfig<typeof iAllowlistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iAllowlistABI}__ and `functionName` set to `"isAllowedToClaim"`.
 */
export function useIAllowlistIsAllowedToClaim<
  TFunctionName extends 'isAllowedToClaim',
  TSelectData = ReadContractResult<typeof iAllowlistABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iAllowlistABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iAllowlistABI, functionName: 'isAllowedToClaim', ...config } as UseContractReadConfig<
    typeof iAllowlistABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__.
 */
export function useIBeaconUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: iBeaconUpgradeableABI, ...config } as UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iBeaconUpgradeableABI}__ and `functionName` set to `"implementation"`.
 */
export function useIBeaconUpgradeableImplementation<
  TFunctionName extends 'implementation',
  TSelectData = ReadContractResult<typeof iBeaconUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iBeaconUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iBeaconUpgradeableABI, functionName: 'implementation', ...config } as UseContractReadConfig<
    typeof iBeaconUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__.
 */
export function useIerc1155MetadataUriUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc1155MetadataUriUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155MetadataUriUpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155MetadataUriUpgradeableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155MetadataUriUpgradeableBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155MetadataUriUpgradeableABI, functionName: 'balanceOfBatch', ...config } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155MetadataUriUpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155MetadataUriUpgradeableABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155MetadataUriUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155MetadataUriUpgradeableABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"uri"`.
 */
export function useIerc1155MetadataUriUpgradeableUri<
  TFunctionName extends 'uri',
  TSelectData = ReadContractResult<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155MetadataUriUpgradeableABI, functionName: 'uri', ...config } as UseContractReadConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__.
 */
export function useIerc1155MetadataUriUpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ierc1155MetadataUriUpgradeableABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName, TMode>({
    abi: ierc1155MetadataUriUpgradeableABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155MetadataUriUpgradeableSafeBatchTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155MetadataUriUpgradeableABI, 'safeBatchTransferFrom'>['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc1155MetadataUriUpgradeableABI, 'safeBatchTransferFrom', TMode>({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155MetadataUriUpgradeableSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155MetadataUriUpgradeableABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc1155MetadataUriUpgradeableABI, 'safeTransferFrom', TMode>({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155MetadataUriUpgradeableSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155MetadataUriUpgradeableABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<typeof ierc1155MetadataUriUpgradeableABI, 'setApprovalForAll', TMode>({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__.
 */
export function usePrepareIerc1155MetadataUriUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc1155MetadataUriUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155MetadataUriUpgradeableSafeBatchTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, 'safeBatchTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, 'safeBatchTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155MetadataUriUpgradeableSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, 'safeTransferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155MetadataUriUpgradeableSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155MetadataUriUpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155MetadataUriUpgradeableABI, 'setApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__.
 */
export function useIerc1155MetadataUriUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc1155MetadataUriUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc1155MetadataUriUpgradeableABI, ...config } as UseContractEventConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155MetadataUriUpgradeableApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155MetadataUriUpgradeableABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1155MetadataUriUpgradeableABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155MetadataUriUpgradeableTransferBatchEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155MetadataUriUpgradeableABI, 'TransferBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1155MetadataUriUpgradeableABI, eventName: 'TransferBatch', ...config } as UseContractEventConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'TransferBatch'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155MetadataUriUpgradeableTransferSingleEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155MetadataUriUpgradeableABI, 'TransferSingle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1155MetadataUriUpgradeableABI, eventName: 'TransferSingle', ...config } as UseContractEventConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'TransferSingle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155MetadataUriUpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155MetadataUriUpgradeableUriEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155MetadataUriUpgradeableABI, 'URI'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1155MetadataUriUpgradeableABI, eventName: 'URI', ...config } as UseContractEventConfig<
    typeof ierc1155MetadataUriUpgradeableABI,
    'URI'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155ReceiverUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155ReceiverUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc1155ReceiverUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155ReceiverUpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc1155ReceiverUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155ReceiverUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155ReceiverUpgradeableABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function useIerc1155ReceiverUpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ierc1155ReceiverUpgradeableABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc1155ReceiverUpgradeableABI, TFunctionName, TMode>({ abi: ierc1155ReceiverUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155BatchReceived<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived'>['request']['abi'],
        'onERC1155BatchReceived',
        TMode
      > & { functionName?: 'onERC1155BatchReceived' }
    : UseContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived', TMode> & {
        abi?: never
        functionName?: 'onERC1155BatchReceived'
      } = {} as any
) {
  return useContractWrite<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived', TMode>({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useIerc1155ReceiverUpgradeableOnErc1155Received<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received'>['request']['abi'],
        'onERC1155Received',
        TMode
      > & { functionName?: 'onERC1155Received' }
    : UseContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received', TMode> & {
        abi?: never
        functionName?: 'onERC1155Received'
      } = {} as any
) {
  return useContractWrite<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received', TMode>({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__.
 */
export function usePrepareIerc1155ReceiverUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc1155ReceiverUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc1155ReceiverUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155BatchReceived(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155BatchReceived',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155BatchReceived'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155ReceiverUpgradeableABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareIerc1155ReceiverUpgradeableOnErc1155Received(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: ierc1155ReceiverUpgradeableABI,
    functionName: 'onERC1155Received',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc1155ReceiverUpgradeableABI, 'onERC1155Received'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc1155UpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc1155UpgradeableBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155UpgradeableABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useIerc1155UpgradeableBalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155UpgradeableABI, functionName: 'balanceOfBatch', ...config } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useIerc1155UpgradeableIsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155UpgradeableABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc1155UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc1155UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1155UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1155UpgradeableABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ierc1155UpgradeableABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof ierc1155UpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ierc1155UpgradeableABI, TFunctionName, TMode>({ abi: ierc1155UpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeBatchTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155UpgradeableABI, 'safeBatchTransferFrom'>['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc1155UpgradeableABI, 'safeBatchTransferFrom', TMode>({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useIerc1155UpgradeableSafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155UpgradeableABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof ierc1155UpgradeableABI, 'safeTransferFrom', TMode>({
    abi: ierc1155UpgradeableABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useIerc1155UpgradeableSetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ierc1155UpgradeableABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof ierc1155UpgradeableABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<typeof ierc1155UpgradeableABI, 'setApprovalForAll', TMode>({
    abi: ierc1155UpgradeableABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function usePrepareIerc1155UpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc1155UpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeBatchTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeBatchTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc1155UpgradeableABI, functionName: 'safeBatchTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareIerc1155UpgradeableSafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc1155UpgradeableABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareIerc1155UpgradeableSetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof ierc1155UpgradeableABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ierc1155UpgradeableABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof ierc1155UpgradeableABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__.
 */
export function useIerc1155UpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ierc1155UpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ierc1155UpgradeableABI, ...config } as UseContractEventConfig<typeof ierc1155UpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useIerc1155UpgradeableApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155UpgradeableABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1155UpgradeableABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof ierc1155UpgradeableABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useIerc1155UpgradeableTransferBatchEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1155UpgradeableABI, eventName: 'TransferBatch', ...config } as UseContractEventConfig<
    typeof ierc1155UpgradeableABI,
    'TransferBatch'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useIerc1155UpgradeableTransferSingleEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155UpgradeableABI, 'TransferSingle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1155UpgradeableABI, eventName: 'TransferSingle', ...config } as UseContractEventConfig<
    typeof ierc1155UpgradeableABI,
    'TransferSingle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc1155UpgradeableABI}__ and `eventName` set to `"URI"`.
 */
export function useIerc1155UpgradeableUriEvent(
  config: Omit<UseContractEventConfig<typeof ierc1155UpgradeableABI, 'URI'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ierc1155UpgradeableABI, eventName: 'URI', ...config } as UseContractEventConfig<
    typeof ierc1155UpgradeableABI,
    'URI'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__.
 */
export function useIerc165UpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc165UpgradeableABI, ...config } as UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc165UpgradeableABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useIerc165UpgradeableSupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof ierc165UpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc165UpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc165UpgradeableABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof ierc165UpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHyperDropABI}__.
 */
export function useIHyperDropRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof iHyperDropABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iHyperDropABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iHyperDropABI, ...config } as UseContractReadConfig<typeof iHyperDropABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"isClaimableHyperdrop"`.
 */
export function useIHyperDropIsClaimableHyperdrop<
  TFunctionName extends 'isClaimableHyperdrop',
  TSelectData = ReadContractResult<typeof iHyperDropABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iHyperDropABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iHyperDropABI, functionName: 'isClaimableHyperdrop', ...config } as UseContractReadConfig<
    typeof iHyperDropABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperDropABI}__.
 */
export function useIHyperDropWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iHyperDropABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof iHyperDropABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iHyperDropABI, TFunctionName, TMode>({ abi: iHyperDropABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"claimHyperdrop"`.
 */
export function useIHyperDropClaimHyperdrop<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iHyperDropABI, 'claimHyperdrop'>['request']['abi'], 'claimHyperdrop', TMode> & {
        functionName?: 'claimHyperdrop'
      }
    : UseContractWriteConfig<typeof iHyperDropABI, 'claimHyperdrop', TMode> & {
        abi?: never
        functionName?: 'claimHyperdrop'
      } = {} as any
) {
  return useContractWrite<typeof iHyperDropABI, 'claimHyperdrop', TMode>({ abi: iHyperDropABI, functionName: 'claimHyperdrop', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"claimHyperdropWithFractions"`.
 */
export function useIHyperDropClaimHyperdropWithFractions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iHyperDropABI, 'claimHyperdropWithFractions'>['request']['abi'],
        'claimHyperdropWithFractions',
        TMode
      > & { functionName?: 'claimHyperdropWithFractions' }
    : UseContractWriteConfig<typeof iHyperDropABI, 'claimHyperdropWithFractions', TMode> & {
        abi?: never
        functionName?: 'claimHyperdropWithFractions'
      } = {} as any
) {
  return useContractWrite<typeof iHyperDropABI, 'claimHyperdropWithFractions', TMode>({
    abi: iHyperDropABI,
    functionName: 'claimHyperdropWithFractions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"claimSingleHyperdrop"`.
 */
export function useIHyperDropClaimSingleHyperdrop<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iHyperDropABI, 'claimSingleHyperdrop'>['request']['abi'],
        'claimSingleHyperdrop',
        TMode
      > & { functionName?: 'claimSingleHyperdrop' }
    : UseContractWriteConfig<typeof iHyperDropABI, 'claimSingleHyperdrop', TMode> & {
        abi?: never
        functionName?: 'claimSingleHyperdrop'
      } = {} as any
) {
  return useContractWrite<typeof iHyperDropABI, 'claimSingleHyperdrop', TMode>({
    abi: iHyperDropABI,
    functionName: 'claimSingleHyperdrop',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"claimSingleHyperdropWithFractions"`.
 */
export function useIHyperDropClaimSingleHyperdropWithFractions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iHyperDropABI, 'claimSingleHyperdropWithFractions'>['request']['abi'],
        'claimSingleHyperdropWithFractions',
        TMode
      > & { functionName?: 'claimSingleHyperdropWithFractions' }
    : UseContractWriteConfig<typeof iHyperDropABI, 'claimSingleHyperdropWithFractions', TMode> & {
        abi?: never
        functionName?: 'claimSingleHyperdropWithFractions'
      } = {} as any
) {
  return useContractWrite<typeof iHyperDropABI, 'claimSingleHyperdropWithFractions', TMode>({
    abi: iHyperDropABI,
    functionName: 'claimSingleHyperdropWithFractions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"createHyperdrop"`.
 */
export function useIHyperDropCreateHyperdrop<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iHyperDropABI, 'createHyperdrop'>['request']['abi'], 'createHyperdrop', TMode> & {
        functionName?: 'createHyperdrop'
      }
    : UseContractWriteConfig<typeof iHyperDropABI, 'createHyperdrop', TMode> & {
        abi?: never
        functionName?: 'createHyperdrop'
      } = {} as any
) {
  return useContractWrite<typeof iHyperDropABI, 'createHyperdrop', TMode>({ abi: iHyperDropABI, functionName: 'createHyperdrop', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperDropABI}__.
 */
export function usePrepareIHyperDropWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iHyperDropABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHyperDropABI, ...config } as UsePrepareContractWriteConfig<typeof iHyperDropABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"claimHyperdrop"`.
 */
export function usePrepareIHyperDropClaimHyperdrop(
  config: Omit<UsePrepareContractWriteConfig<typeof iHyperDropABI, 'claimHyperdrop'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHyperDropABI, functionName: 'claimHyperdrop', ...config } as UsePrepareContractWriteConfig<
    typeof iHyperDropABI,
    'claimHyperdrop'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"claimHyperdropWithFractions"`.
 */
export function usePrepareIHyperDropClaimHyperdropWithFractions(
  config: Omit<UsePrepareContractWriteConfig<typeof iHyperDropABI, 'claimHyperdropWithFractions'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHyperDropABI, functionName: 'claimHyperdropWithFractions', ...config } as UsePrepareContractWriteConfig<
    typeof iHyperDropABI,
    'claimHyperdropWithFractions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"claimSingleHyperdrop"`.
 */
export function usePrepareIHyperDropClaimSingleHyperdrop(
  config: Omit<UsePrepareContractWriteConfig<typeof iHyperDropABI, 'claimSingleHyperdrop'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHyperDropABI, functionName: 'claimSingleHyperdrop', ...config } as UsePrepareContractWriteConfig<
    typeof iHyperDropABI,
    'claimSingleHyperdrop'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"claimSingleHyperdropWithFractions"`.
 */
export function usePrepareIHyperDropClaimSingleHyperdropWithFractions(
  config: Omit<UsePrepareContractWriteConfig<typeof iHyperDropABI, 'claimSingleHyperdropWithFractions'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({
    abi: iHyperDropABI,
    functionName: 'claimSingleHyperdropWithFractions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iHyperDropABI, 'claimSingleHyperdropWithFractions'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHyperDropABI}__ and `functionName` set to `"createHyperdrop"`.
 */
export function usePrepareIHyperDropCreateHyperdrop(
  config: Omit<UsePrepareContractWriteConfig<typeof iHyperDropABI, 'createHyperdrop'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHyperDropABI, functionName: 'createHyperdrop', ...config } as UsePrepareContractWriteConfig<
    typeof iHyperDropABI,
    'createHyperdrop'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHypercertTokenABI}__.
 */
export function useIHypercertTokenRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof iHypercertTokenABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iHypercertTokenABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iHypercertTokenABI, ...config } as UseContractReadConfig<typeof iHypercertTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"unitsOf"`.
 */
export function useIHypercertTokenUnitsOf<
  TFunctionName extends 'unitsOf',
  TSelectData = ReadContractResult<typeof iHypercertTokenABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iHypercertTokenABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iHypercertTokenABI, functionName: 'unitsOf', ...config } as UseContractReadConfig<
    typeof iHypercertTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"uri"`.
 */
export function useIHypercertTokenUri<TFunctionName extends 'uri', TSelectData = ReadContractResult<typeof iHypercertTokenABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iHypercertTokenABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: iHypercertTokenABI, functionName: 'uri', ...config } as UseContractReadConfig<
    typeof iHypercertTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__.
 */
export function useIHypercertTokenWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iHypercertTokenABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof iHypercertTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iHypercertTokenABI, TFunctionName, TMode>({ abi: iHypercertTokenABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"burnFraction"`.
 */
export function useIHypercertTokenBurnFraction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iHypercertTokenABI, 'burnFraction'>['request']['abi'], 'burnFraction', TMode> & {
        functionName?: 'burnFraction'
      }
    : UseContractWriteConfig<typeof iHypercertTokenABI, 'burnFraction', TMode> & {
        abi?: never
        functionName?: 'burnFraction'
      } = {} as any
) {
  return useContractWrite<typeof iHypercertTokenABI, 'burnFraction', TMode>({
    abi: iHypercertTokenABI,
    functionName: 'burnFraction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"mergeFractions"`.
 */
export function useIHypercertTokenMergeFractions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iHypercertTokenABI, 'mergeFractions'>['request']['abi'], 'mergeFractions', TMode> & {
        functionName?: 'mergeFractions'
      }
    : UseContractWriteConfig<typeof iHypercertTokenABI, 'mergeFractions', TMode> & {
        abi?: never
        functionName?: 'mergeFractions'
      } = {} as any
) {
  return useContractWrite<typeof iHypercertTokenABI, 'mergeFractions', TMode>({
    abi: iHypercertTokenABI,
    functionName: 'mergeFractions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"mintClaim"`.
 */
export function useIHypercertTokenMintClaim<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iHypercertTokenABI, 'mintClaim'>['request']['abi'], 'mintClaim', TMode> & {
        functionName?: 'mintClaim'
      }
    : UseContractWriteConfig<typeof iHypercertTokenABI, 'mintClaim', TMode> & {
        abi?: never
        functionName?: 'mintClaim'
      } = {} as any
) {
  return useContractWrite<typeof iHypercertTokenABI, 'mintClaim', TMode>({ abi: iHypercertTokenABI, functionName: 'mintClaim', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"mintClaimWithFractions"`.
 */
export function useIHypercertTokenMintClaimWithFractions<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iHypercertTokenABI, 'mintClaimWithFractions'>['request']['abi'],
        'mintClaimWithFractions',
        TMode
      > & { functionName?: 'mintClaimWithFractions' }
    : UseContractWriteConfig<typeof iHypercertTokenABI, 'mintClaimWithFractions', TMode> & {
        abi?: never
        functionName?: 'mintClaimWithFractions'
      } = {} as any
) {
  return useContractWrite<typeof iHypercertTokenABI, 'mintClaimWithFractions', TMode>({
    abi: iHypercertTokenABI,
    functionName: 'mintClaimWithFractions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"splitFraction"`.
 */
export function useIHypercertTokenSplitFraction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iHypercertTokenABI, 'splitFraction'>['request']['abi'], 'splitFraction', TMode> & {
        functionName?: 'splitFraction'
      }
    : UseContractWriteConfig<typeof iHypercertTokenABI, 'splitFraction', TMode> & {
        abi?: never
        functionName?: 'splitFraction'
      } = {} as any
) {
  return useContractWrite<typeof iHypercertTokenABI, 'splitFraction', TMode>({
    abi: iHypercertTokenABI,
    functionName: 'splitFraction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__.
 */
export function usePrepareIHypercertTokenWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iHypercertTokenABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHypercertTokenABI, ...config } as UsePrepareContractWriteConfig<typeof iHypercertTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"burnFraction"`.
 */
export function usePrepareIHypercertTokenBurnFraction(
  config: Omit<UsePrepareContractWriteConfig<typeof iHypercertTokenABI, 'burnFraction'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHypercertTokenABI, functionName: 'burnFraction', ...config } as UsePrepareContractWriteConfig<
    typeof iHypercertTokenABI,
    'burnFraction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"mergeFractions"`.
 */
export function usePrepareIHypercertTokenMergeFractions(
  config: Omit<UsePrepareContractWriteConfig<typeof iHypercertTokenABI, 'mergeFractions'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHypercertTokenABI, functionName: 'mergeFractions', ...config } as UsePrepareContractWriteConfig<
    typeof iHypercertTokenABI,
    'mergeFractions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"mintClaim"`.
 */
export function usePrepareIHypercertTokenMintClaim(
  config: Omit<UsePrepareContractWriteConfig<typeof iHypercertTokenABI, 'mintClaim'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHypercertTokenABI, functionName: 'mintClaim', ...config } as UsePrepareContractWriteConfig<
    typeof iHypercertTokenABI,
    'mintClaim'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"mintClaimWithFractions"`.
 */
export function usePrepareIHypercertTokenMintClaimWithFractions(
  config: Omit<UsePrepareContractWriteConfig<typeof iHypercertTokenABI, 'mintClaimWithFractions'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHypercertTokenABI, functionName: 'mintClaimWithFractions', ...config } as UsePrepareContractWriteConfig<
    typeof iHypercertTokenABI,
    'mintClaimWithFractions'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iHypercertTokenABI}__ and `functionName` set to `"splitFraction"`.
 */
export function usePrepareIHypercertTokenSplitFraction(
  config: Omit<UsePrepareContractWriteConfig<typeof iHypercertTokenABI, 'splitFraction'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iHypercertTokenABI, functionName: 'splitFraction', ...config } as UsePrepareContractWriteConfig<
    typeof iHypercertTokenABI,
    'splitFraction'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iHypercertTokenABI}__.
 */
export function useIHypercertTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof iHypercertTokenABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: iHypercertTokenABI, ...config } as UseContractEventConfig<typeof iHypercertTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iHypercertTokenABI}__ and `eventName` set to `"ClaimStored"`.
 */
export function useIHypercertTokenClaimStoredEvent(
  config: Omit<UseContractEventConfig<typeof iHypercertTokenABI, 'ClaimStored'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: iHypercertTokenABI, eventName: 'ClaimStored', ...config } as UseContractEventConfig<
    typeof iHypercertTokenABI,
    'ClaimStored'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: iMulticall3ABI, ...config } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<TFunctionName extends 'getBasefee', TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBasefee', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TFunctionName extends 'getBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBlockHash', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TFunctionName extends 'getBlockNumber',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getBlockNumber', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<TFunctionName extends 'getChainId', TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getChainId', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TFunctionName extends 'getCurrentBlockCoinbase',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getCurrentBlockCoinbase', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TFunctionName extends 'getCurrentBlockDifficulty',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getCurrentBlockDifficulty', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TFunctionName extends 'getCurrentBlockGasLimit',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getCurrentBlockGasLimit', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TFunctionName extends 'getCurrentBlockTimestamp',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getCurrentBlockTimestamp', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TFunctionName extends 'getEthBalance',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getEthBalance', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TFunctionName extends 'getLastBlockHash',
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: iMulticall3ABI, functionName: 'getLastBlockHash', ...config } as UseContractReadConfig<
    typeof iMulticall3ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iMulticall3ABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof iMulticall3ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, TFunctionName, TMode>({ abi: iMulticall3ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate'>['request']['abi'], 'aggregate', TMode> & {
        functionName?: 'aggregate'
      }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate', TMode> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate', TMode>({ abi: iMulticall3ABI, functionName: 'aggregate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3'>['request']['abi'], 'aggregate3', TMode> & {
        functionName?: 'aggregate3'
      }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3', TMode> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3', TMode>({ abi: iMulticall3ABI, functionName: 'aggregate3', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3Value'>['request']['abi'], 'aggregate3Value', TMode> & {
        functionName?: 'aggregate3Value'
      }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value', TMode> & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, 'aggregate3Value', TMode>({ abi: iMulticall3ABI, functionName: 'aggregate3Value', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iMulticall3ABI, 'blockAndAggregate'>['request']['abi'], 'blockAndAggregate', TMode> & {
        functionName?: 'blockAndAggregate'
      }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate', TMode> & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, 'blockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof iMulticall3ABI, 'tryAggregate'>['request']['abi'], 'tryAggregate', TMode> & {
        functionName?: 'tryAggregate'
      }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate', TMode> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryAggregate', TMode>({ abi: iMulticall3ABI, functionName: 'tryAggregate', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof iMulticall3ABI, 'tryBlockAndAggregate'>['request']['abi'],
        'tryBlockAndAggregate',
        TMode
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode> & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any
) {
  return useContractWrite<typeof iMulticall3ABI, 'tryBlockAndAggregate', TMode>({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, ...config } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, functionName: 'aggregate', ...config } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'aggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, functionName: 'aggregate3', ...config } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'aggregate3'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, functionName: 'aggregate3Value', ...config } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'aggregate3Value'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, functionName: 'blockAndAggregate', ...config } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, functionName: 'tryAggregate', ...config } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryBlockAndAggregate'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: iMulticall3ABI, functionName: 'tryBlockAndAggregate', ...config } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof initializableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: initializableABI, ...config } as UseContractEventConfig<typeof initializableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link initializableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useInitializableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof initializableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: initializableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof initializableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: ownableABI, ...config } as UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableOwner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof ownableABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof ownableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: ownableABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ownableABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof ownableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ownableABI, TFunctionName, TMode>({ abi: ownableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ownableABI, 'renounceOwnership'>['request']['abi'], 'renounceOwnership', TMode> & {
        functionName?: 'renounceOwnership'
      }
    : UseContractWriteConfig<typeof ownableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof ownableABI, 'renounceOwnership', TMode>({ abi: ownableABI, functionName: 'renounceOwnership', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ownableABI, 'transferOwnership'>['request']['abi'], 'transferOwnership', TMode> & {
        functionName?: 'transferOwnership'
      }
    : UseContractWriteConfig<typeof ownableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof ownableABI, 'transferOwnership', TMode>({ abi: ownableABI, functionName: 'transferOwnership', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__.
 */
export function usePrepareOwnableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, ...config } as UsePrepareContractWriteConfig<typeof ownableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownableABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__.
 */
export function useOwnableEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof ownableABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: ownableABI, ...config } as UseContractEventConfig<typeof ownableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownableABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownableABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownableABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ownableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ownableUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ownableUpgradeableABI, ...config } as UseContractReadConfig<typeof ownableUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"owner"`.
 */
export function useOwnableUpgradeableOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof ownableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ownableUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ownableUpgradeableABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof ownableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof ownableUpgradeableABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof ownableUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof ownableUpgradeableABI, TFunctionName, TMode>({ abi: ownableUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOwnableUpgradeableRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableUpgradeableABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof ownableUpgradeableABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof ownableUpgradeableABI, 'renounceOwnership', TMode>({
    abi: ownableUpgradeableABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOwnableUpgradeableTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof ownableUpgradeableABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof ownableUpgradeableABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof ownableUpgradeableABI, 'transferOwnership', TMode>({
    abi: ownableUpgradeableABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function usePrepareOwnableUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableUpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableUpgradeableABI, ...config } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOwnableUpgradeableRenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableUpgradeableABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableUpgradeableABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOwnableUpgradeableTransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof ownableUpgradeableABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: ownableUpgradeableABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof ownableUpgradeableABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__.
 */
export function useOwnableUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: ownableUpgradeableABI, ...config } as UseContractEventConfig<typeof ownableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useOwnableUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof ownableUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownableUpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof ownableUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ownableUpgradeableABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOwnableUpgradeableOwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof ownableUpgradeableABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: ownableUpgradeableABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof ownableUpgradeableABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof pausableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: pausableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof pausableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `functionName` set to `"paused"`.
 */
export function usePausableUpgradeablePaused<
  TFunctionName extends 'paused',
  TSelectData = ReadContractResult<typeof pausableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof pausableUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: pausableUpgradeableABI, functionName: 'paused', ...config } as UseContractReadConfig<
    typeof pausableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__.
 */
export function usePausableUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof pausableUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: pausableUpgradeableABI, ...config } as UseContractEventConfig<typeof pausableUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function usePausableUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof pausableUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: pausableUpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof pausableUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Paused"`.
 */
export function usePausableUpgradeablePausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableUpgradeableABI, 'Paused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: pausableUpgradeableABI, eventName: 'Paused', ...config } as UseContractEventConfig<
    typeof pausableUpgradeableABI,
    'Paused'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pausableUpgradeableABI}__ and `eventName` set to `"Unpaused"`.
 */
export function usePausableUpgradeableUnpausedEvent(
  config: Omit<UseContractEventConfig<typeof pausableUpgradeableABI, 'Unpaused'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: pausableUpgradeableABI, eventName: 'Unpaused', ...config } as UseContractEventConfig<
    typeof pausableUpgradeableABI,
    'Unpaused'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semiFungible1155ABI}__.
 */
export function useSemiFungible1155Read<TFunctionName extends string, TSelectData = ReadContractResult<typeof semiFungible1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: semiFungible1155ABI, ...config } as UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSemiFungible1155BalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof semiFungible1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semiFungible1155ABI, functionName: 'balanceOf', ...config } as UseContractReadConfig<
    typeof semiFungible1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useSemiFungible1155BalanceOfBatch<
  TFunctionName extends 'balanceOfBatch',
  TSelectData = ReadContractResult<typeof semiFungible1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semiFungible1155ABI, functionName: 'balanceOfBatch', ...config } as UseContractReadConfig<
    typeof semiFungible1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useSemiFungible1155IsApprovedForAll<
  TFunctionName extends 'isApprovedForAll',
  TSelectData = ReadContractResult<typeof semiFungible1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semiFungible1155ABI, functionName: 'isApprovedForAll', ...config } as UseContractReadConfig<
    typeof semiFungible1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"owner"`.
 */
export function useSemiFungible1155Owner<TFunctionName extends 'owner', TSelectData = ReadContractResult<typeof semiFungible1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: semiFungible1155ABI, functionName: 'owner', ...config } as UseContractReadConfig<
    typeof semiFungible1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"ownerOf"`.
 */
export function useSemiFungible1155OwnerOf<
  TFunctionName extends 'ownerOf',
  TSelectData = ReadContractResult<typeof semiFungible1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semiFungible1155ABI, functionName: 'ownerOf', ...config } as UseContractReadConfig<
    typeof semiFungible1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useSemiFungible1155ProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof semiFungible1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semiFungible1155ABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof semiFungible1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useSemiFungible1155SupportsInterface<
  TFunctionName extends 'supportsInterface',
  TSelectData = ReadContractResult<typeof semiFungible1155ABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: semiFungible1155ABI, functionName: 'supportsInterface', ...config } as UseContractReadConfig<
    typeof semiFungible1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"uri"`.
 */
export function useSemiFungible1155Uri<TFunctionName extends 'uri', TSelectData = ReadContractResult<typeof semiFungible1155ABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof semiFungible1155ABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: semiFungible1155ABI, functionName: 'uri', ...config } as UseContractReadConfig<
    typeof semiFungible1155ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__.
 */
export function useSemiFungible1155Write<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semiFungible1155ABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof semiFungible1155ABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, TFunctionName, TMode>({ abi: semiFungible1155ABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"__SemiFungible1155_init"`.
 */
export function useSemiFungible1155SemiFungible1155Init<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof semiFungible1155ABI, '__SemiFungible1155_init'>['request']['abi'],
        '__SemiFungible1155_init',
        TMode
      > & { functionName?: '__SemiFungible1155_init' }
    : UseContractWriteConfig<typeof semiFungible1155ABI, '__SemiFungible1155_init', TMode> & {
        abi?: never
        functionName?: '__SemiFungible1155_init'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, '__SemiFungible1155_init', TMode>({
    abi: semiFungible1155ABI,
    functionName: '__SemiFungible1155_init',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"burn"`.
 */
export function useSemiFungible1155Burn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semiFungible1155ABI, 'burn'>['request']['abi'], 'burn', TMode> & {
        functionName?: 'burn'
      }
    : UseContractWriteConfig<typeof semiFungible1155ABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, 'burn', TMode>({ abi: semiFungible1155ABI, functionName: 'burn', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"burnBatch"`.
 */
export function useSemiFungible1155BurnBatch<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semiFungible1155ABI, 'burnBatch'>['request']['abi'], 'burnBatch', TMode> & {
        functionName?: 'burnBatch'
      }
    : UseContractWriteConfig<typeof semiFungible1155ABI, 'burnBatch', TMode> & {
        abi?: never
        functionName?: 'burnBatch'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, 'burnBatch', TMode>({ abi: semiFungible1155ABI, functionName: 'burnBatch', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSemiFungible1155RenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof semiFungible1155ABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof semiFungible1155ABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, 'renounceOwnership', TMode>({
    abi: semiFungible1155ABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useSemiFungible1155SafeBatchTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof semiFungible1155ABI, 'safeBatchTransferFrom'>['request']['abi'],
        'safeBatchTransferFrom',
        TMode
      > & { functionName?: 'safeBatchTransferFrom' }
    : UseContractWriteConfig<typeof semiFungible1155ABI, 'safeBatchTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeBatchTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, 'safeBatchTransferFrom', TMode>({
    abi: semiFungible1155ABI,
    functionName: 'safeBatchTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useSemiFungible1155SafeTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof semiFungible1155ABI, 'safeTransferFrom'>['request']['abi'],
        'safeTransferFrom',
        TMode
      > & { functionName?: 'safeTransferFrom' }
    : UseContractWriteConfig<typeof semiFungible1155ABI, 'safeTransferFrom', TMode> & {
        abi?: never
        functionName?: 'safeTransferFrom'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, 'safeTransferFrom', TMode>({
    abi: semiFungible1155ABI,
    functionName: 'safeTransferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useSemiFungible1155SetApprovalForAll<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof semiFungible1155ABI, 'setApprovalForAll'>['request']['abi'],
        'setApprovalForAll',
        TMode
      > & { functionName?: 'setApprovalForAll' }
    : UseContractWriteConfig<typeof semiFungible1155ABI, 'setApprovalForAll', TMode> & {
        abi?: never
        functionName?: 'setApprovalForAll'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, 'setApprovalForAll', TMode>({
    abi: semiFungible1155ABI,
    functionName: 'setApprovalForAll',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSemiFungible1155TransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof semiFungible1155ABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof semiFungible1155ABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, 'transferOwnership', TMode>({
    abi: semiFungible1155ABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useSemiFungible1155UpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof semiFungible1155ABI, 'upgradeTo'>['request']['abi'], 'upgradeTo', TMode> & {
        functionName?: 'upgradeTo'
      }
    : UseContractWriteConfig<typeof semiFungible1155ABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, 'upgradeTo', TMode>({ abi: semiFungible1155ABI, functionName: 'upgradeTo', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useSemiFungible1155UpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof semiFungible1155ABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof semiFungible1155ABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof semiFungible1155ABI, 'upgradeToAndCall', TMode>({
    abi: semiFungible1155ABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__.
 */
export function usePrepareSemiFungible1155Write<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, ...config } as UsePrepareContractWriteConfig<typeof semiFungible1155ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"__SemiFungible1155_init"`.
 */
export function usePrepareSemiFungible1155SemiFungible1155Init(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, '__SemiFungible1155_init'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: '__SemiFungible1155_init', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    '__SemiFungible1155_init'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareSemiFungible1155Burn(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, 'burn'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: 'burn', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    'burn'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"burnBatch"`.
 */
export function usePrepareSemiFungible1155BurnBatch(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, 'burnBatch'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: 'burnBatch', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    'burnBatch'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSemiFungible1155RenounceOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, 'renounceOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: 'renounceOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    'renounceOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareSemiFungible1155SafeBatchTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, 'safeBatchTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: 'safeBatchTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    'safeBatchTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareSemiFungible1155SafeTransferFrom(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, 'safeTransferFrom'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: 'safeTransferFrom', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    'safeTransferFrom'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareSemiFungible1155SetApprovalForAll(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, 'setApprovalForAll'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: 'setApprovalForAll', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    'setApprovalForAll'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSemiFungible1155TransferOwnership(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, 'transferOwnership'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: 'transferOwnership', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    'transferOwnership'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareSemiFungible1155UpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, 'upgradeTo'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: 'upgradeTo', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    'upgradeTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link semiFungible1155ABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareSemiFungible1155UpgradeToAndCall(
  config: Omit<UsePrepareContractWriteConfig<typeof semiFungible1155ABI, 'upgradeToAndCall'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: semiFungible1155ABI, functionName: 'upgradeToAndCall', ...config } as UsePrepareContractWriteConfig<
    typeof semiFungible1155ABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__.
 */
export function useSemiFungible1155Event<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, ...config } as UseContractEventConfig<typeof semiFungible1155ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useSemiFungible1155AdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useSemiFungible1155ApprovalForAllEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'ApprovalForAll'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'ApprovalForAll', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'ApprovalForAll'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"BatchValueTransfer"`.
 */
export function useSemiFungible1155BatchValueTransferEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'BatchValueTransfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'BatchValueTransfer', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'BatchValueTransfer'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useSemiFungible1155BeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSemiFungible1155InitializedEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSemiFungible1155OwnershipTransferredEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'OwnershipTransferred'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'OwnershipTransferred', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'OwnershipTransferred'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useSemiFungible1155TransferBatchEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'TransferBatch'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'TransferBatch', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'TransferBatch'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useSemiFungible1155TransferSingleEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'TransferSingle'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'TransferSingle', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'TransferSingle'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"URI"`.
 */
export function useSemiFungible1155UriEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'URI'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'URI', ...config } as UseContractEventConfig<typeof semiFungible1155ABI, 'URI'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useSemiFungible1155UpgradedEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link semiFungible1155ABI}__ and `eventName` set to `"ValueTransfer"`.
 */
export function useSemiFungible1155ValueTransferEvent(
  config: Omit<UseContractEventConfig<typeof semiFungible1155ABI, 'ValueTransfer'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: semiFungible1155ABI, eventName: 'ValueTransfer', ...config } as UseContractEventConfig<
    typeof semiFungible1155ABI,
    'ValueTransfer'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: stdInvariantABI, ...config } as UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts<
  TFunctionName extends 'excludeArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'excludeArtifacts', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts<
  TFunctionName extends 'excludeContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'excludeContracts', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders<
  TFunctionName extends 'excludeSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'excludeSenders', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetArtifactSelectors', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts<
  TFunctionName extends 'targetArtifacts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetArtifacts', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts<
  TFunctionName extends 'targetContracts',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetContracts', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors<
  TFunctionName extends 'targetSelectors',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetSelectors', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders<
  TFunctionName extends 'targetSenders',
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: stdInvariantABI, functionName: 'targetSenders', ...config } as UseContractReadConfig<
    typeof stdInvariantABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__.
 */
export function useTestRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof testABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: testABI, ...config } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useTestIsTest<TFunctionName extends 'IS_TEST', TSelectData = ReadContractResult<typeof testABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: testABI, functionName: 'IS_TEST', ...config } as UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useTestExcludeArtifacts<TFunctionName extends 'excludeArtifacts', TSelectData = ReadContractResult<typeof testABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: testABI, functionName: 'excludeArtifacts', ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useTestExcludeContracts<TFunctionName extends 'excludeContracts', TSelectData = ReadContractResult<typeof testABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: testABI, functionName: 'excludeContracts', ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useTestExcludeSenders<TFunctionName extends 'excludeSenders', TSelectData = ReadContractResult<typeof testABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: testABI, functionName: 'excludeSenders', ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useTestTargetArtifactSelectors<
  TFunctionName extends 'targetArtifactSelectors',
  TSelectData = ReadContractResult<typeof testABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: testABI, functionName: 'targetArtifactSelectors', ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useTestTargetArtifacts<TFunctionName extends 'targetArtifacts', TSelectData = ReadContractResult<typeof testABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: testABI, functionName: 'targetArtifacts', ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useTestTargetContracts<TFunctionName extends 'targetContracts', TSelectData = ReadContractResult<typeof testABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: testABI, functionName: 'targetContracts', ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useTestTargetSelectors<TFunctionName extends 'targetSelectors', TSelectData = ReadContractResult<typeof testABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: testABI, functionName: 'targetSelectors', ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useTestTargetSenders<TFunctionName extends 'targetSenders', TSelectData = ReadContractResult<typeof testABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof testABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any
) {
  return useContractRead({ abi: testABI, functionName: 'targetSenders', ...config } as UseContractReadConfig<
    typeof testABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function useTestWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof testABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof testABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof testABI, TFunctionName, TMode>({ abi: testABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function useTestFailed<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof testABI, 'failed'>['request']['abi'], 'failed', TMode> & { functionName?: 'failed' }
    : UseContractWriteConfig<typeof testABI, 'failed', TMode> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any
) {
  return useContractWrite<typeof testABI, 'failed', TMode>({ abi: testABI, functionName: 'failed', ...config } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__.
 */
export function usePrepareTestWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof testABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: testABI, ...config } as UsePrepareContractWriteConfig<typeof testABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareTestFailed(config: Omit<UsePrepareContractWriteConfig<typeof testABI, 'failed'>, 'abi' | 'functionName'> = {} as any) {
  return usePrepareContractWrite({ abi: testABI, functionName: 'failed', ...config } as UsePrepareContractWriteConfig<typeof testABI, 'failed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__.
 */
export function useTestEvent<TEventName extends string>(config: Omit<UseContractEventConfig<typeof testABI, TEventName>, 'abi'> = {} as any) {
  return useContractEvent({ abi: testABI, ...config } as UseContractEventConfig<typeof testABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log"`.
 */
export function useTestLogEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log', ...config } as UseContractEventConfig<typeof testABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_address"`.
 */
export function useTestLogAddressEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_address'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_address', ...config } as UseContractEventConfig<typeof testABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_array"`.
 */
export function useTestLogArrayEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_array'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_array', ...config } as UseContractEventConfig<typeof testABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useTestLogBytesEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_bytes'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_bytes', ...config } as UseContractEventConfig<typeof testABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useTestLogBytes32Event(config: Omit<UseContractEventConfig<typeof testABI, 'log_bytes32'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_bytes32', ...config } as UseContractEventConfig<typeof testABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_int"`.
 */
export function useTestLogIntEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_int'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_int', ...config } as UseContractEventConfig<typeof testABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useTestLogNamedAddressEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_address'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_address', ...config } as UseContractEventConfig<typeof testABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useTestLogNamedArrayEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_named_array'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_array', ...config } as UseContractEventConfig<typeof testABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useTestLogNamedBytesEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_named_bytes'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_bytes', ...config } as UseContractEventConfig<typeof testABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useTestLogNamedBytes32Event(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_bytes32'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_bytes32', ...config } as UseContractEventConfig<typeof testABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useTestLogNamedDecimalIntEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_decimal_int'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_decimal_int', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_decimal_int'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useTestLogNamedDecimalUintEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_decimal_uint'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_decimal_uint', ...config } as UseContractEventConfig<
    typeof testABI,
    'log_named_decimal_uint'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useTestLogNamedIntEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_named_int'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_int', ...config } as UseContractEventConfig<typeof testABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useTestLogNamedStringEvent(
  config: Omit<UseContractEventConfig<typeof testABI, 'log_named_string'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_string', ...config } as UseContractEventConfig<typeof testABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useTestLogNamedUintEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_named_uint'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_named_uint', ...config } as UseContractEventConfig<typeof testABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_string"`.
 */
export function useTestLogStringEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_string'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_string', ...config } as UseContractEventConfig<typeof testABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"log_uint"`.
 */
export function useTestLogUintEvent(config: Omit<UseContractEventConfig<typeof testABI, 'log_uint'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'log_uint', ...config } as UseContractEventConfig<typeof testABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testABI}__ and `eventName` set to `"logs"`.
 */
export function useTestLogsEvent(config: Omit<UseContractEventConfig<typeof testABI, 'logs'>, 'abi' | 'eventName'> = {} as any) {
  return useContractEvent({ abi: testABI, eventName: 'logs', ...config } as UseContractEventConfig<typeof testABI, 'logs'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>>(
  config: Omit<UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any
) {
  return useContractRead({ abi: uupsUpgradeableABI, ...config } as UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useUupsUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof uupsUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof uupsUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: uupsUpgradeableABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof uupsUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableWrite<TFunctionName extends string, TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof uupsUpgradeableABI, string>['request']['abi'], TFunctionName, TMode>
    : UseContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof uupsUpgradeableABI, TFunctionName, TMode>({ abi: uupsUpgradeableABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useUupsUpgradeableUpgradeTo<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<PrepareWriteContractResult<typeof uupsUpgradeableABI, 'upgradeTo'>['request']['abi'], 'upgradeTo', TMode> & {
        functionName?: 'upgradeTo'
      }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo', TMode> & {
        abi?: never
        functionName?: 'upgradeTo'
      } = {} as any
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeTo', TMode>({ abi: uupsUpgradeableABI, functionName: 'upgradeTo', ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useUupsUpgradeableUpgradeToAndCall<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof uupsUpgradeableABI, 'upgradeToAndCall'>['request']['abi'],
        'upgradeToAndCall',
        TMode
      > & { functionName?: 'upgradeToAndCall' }
    : UseContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode> & {
        abi?: never
        functionName?: 'upgradeToAndCall'
      } = {} as any
) {
  return useContractWrite<typeof uupsUpgradeableABI, 'upgradeToAndCall', TMode>({
    abi: uupsUpgradeableABI,
    functionName: 'upgradeToAndCall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function usePrepareUupsUpgradeableWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: uupsUpgradeableABI, ...config } as UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareUupsUpgradeableUpgradeTo(
  config: Omit<UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeTo'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: uupsUpgradeableABI, functionName: 'upgradeTo', ...config } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    'upgradeTo'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareUupsUpgradeableUpgradeToAndCall(
  config: Omit<UsePrepareContractWriteConfig<typeof uupsUpgradeableABI, 'upgradeToAndCall'>, 'abi' | 'functionName'> = {} as any
) {
  return usePrepareContractWrite({ abi: uupsUpgradeableABI, functionName: 'upgradeToAndCall', ...config } as UsePrepareContractWriteConfig<
    typeof uupsUpgradeableABI,
    'upgradeToAndCall'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__.
 */
export function useUupsUpgradeableEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: uupsUpgradeableABI, ...config } as UseContractEventConfig<typeof uupsUpgradeableABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useUupsUpgradeableAdminChangedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'AdminChanged'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: uupsUpgradeableABI, eventName: 'AdminChanged', ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    'AdminChanged'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useUupsUpgradeableBeaconUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'BeaconUpgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: uupsUpgradeableABI, eventName: 'BeaconUpgraded', ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    'BeaconUpgraded'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Initialized"`.
 */
export function useUupsUpgradeableInitializedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'Initialized'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: uupsUpgradeableABI, eventName: 'Initialized', ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    'Initialized'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link uupsUpgradeableABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useUupsUpgradeableUpgradedEvent(
  config: Omit<UseContractEventConfig<typeof uupsUpgradeableABI, 'Upgraded'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({ abi: uupsUpgradeableABI, eventName: 'Upgraded', ...config } as UseContractEventConfig<
    typeof uupsUpgradeableABI,
    'Upgraded'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__.
 */
export function useIerc1822ProxiableUpgradeableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc1822ProxiableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>, 'abi'> = {} as any) {
  return useContractRead({ abi: ierc1822ProxiableUpgradeableABI, ...config } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc1822ProxiableUpgradeableABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useIerc1822ProxiableUpgradeableProxiableUuid<
  TFunctionName extends 'proxiableUUID',
  TSelectData = ReadContractResult<typeof ierc1822ProxiableUpgradeableABI, TFunctionName>
>(config: Omit<UseContractReadConfig<typeof ierc1822ProxiableUpgradeableABI, TFunctionName, TSelectData>, 'abi' | 'functionName'> = {} as any) {
  return useContractRead({ abi: ierc1822ProxiableUpgradeableABI, functionName: 'proxiableUUID', ...config } as UseContractReadConfig<
    typeof ierc1822ProxiableUpgradeableABI,
    TFunctionName,
    TSelectData
  >)
}
